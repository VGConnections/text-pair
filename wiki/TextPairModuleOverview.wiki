#summary How to index a corpus, set up a server, and run a query on a Text::Pair collection.

= Introduction =

There are three different modes of use for the Text::Pair object: index, server, and query mode. This document describes how to accomplish each stage.

=Architecture=

==Overview==
An index script runs over a corpus of documents and creates a shingle index file or all n-grams in the corpus. A shingle hit server loads this index, opens a port and accepts incoming shingles and returns all the hits in the corpus for that shingle. A query script generates shingles for new documents, sends them to the shingle hit server to find all occurrences of shared shingles in the corpus, and generates a list of all shared text sequences between the query document and the indexed corpus.



==Index Structure==
===shingles.idx===
In order to provide a fast search through a large corpus, Text::Pair creates an index of all "shingles" (sequences of N words) in the corpus. For a corpus many millions of words, this index is likely too large to fit into memory, so it is stored on disk in a file called {{{shingles.idx}}}. The structure of {{{shingles.idx}}} is as follows:

{{{
shingle_bucket	shingle	document_id:shingle_sequence:start_byte:byte_length	document_id:shingle_sequence:start_byte:byte_length	document_id:shingle_sequence:start_byte:byte_length ...
}}}

The {{{shingle_bucket}}} is a hash value computed for each shingle, and its range varies according to the {{{num_shingle_buckets}}} parameter. The more buckets you have, the less shingles in each bucket and the less you'll need to read in any given lookup from disk, and the less you'll need to search through to find a given shingle. Each {{{shingle_bucket}}} is a key to a hash, which sits in memory, whose values are the byte range for that bucket in {{{shingles.idx}}}. For best performance, you should set {{{num_shingle_buckets}}} to the highest value that will fit in memory -- 10,000,000 hash keys and values will take a little less than 1.5GBs, for example.

{{{shingle}}} is simply the multi-word sequence found in the text, with underscores replacing spaces. Shingles may skip short words that are less than {{{min_word_length}}} bytes long, or words in the {{{stop_words}}} array.

After these two values, there are 1 - N values of the form {{{document_id:shingle_sequence:start_byte:offset}}}, which represent the locations of all occurrences of this particular shingle in the corpus. {{{document_id}}} is an integer from 0 - N based on load order. {{{shingle_sequence}}} is a 1 - N integer; its value represents the location of this shingle in the sequence of shingles in the document. {{{start_byte}}} is the starting byte offset of the shingle in the document, and {{{byte_length}}} is the length in bytes of the words covered by the shingle. 

Note that {{{byte_length}}} may be considerably longer than the number of bytes in the actual shingle, due to words omitted from the shingle. Omitted words may be short words, {{{stop_words}}}, or words found withing {{{omit_tags}}}. Although these words are not considered for purposes of shingle matching, they are retrieved when printing pairs.

Here is a sample entry in {{{shingles.idx}}}:

{{{
99804   william_advances_meet   7512:5661:69410:24      7676:632111:8746474:24  8048:84361:1110423:24   8397:14051:172147:24
}}}

===buckets.idx===
The {{{buckets.idx}}} file contains one line for each shingle bucket that is used. It is an index from the shingle bucket, which is a hash of the shingle, to the byte range in {{{shingles.idx}}} that contains the shingles occurrences for all the shingles in the bucket.

Here's a sample:

{{{3850    5498657 5500609}}}

The bucket is 3850, so all the shingles that hash to 3850 belong in this bucket. The byte range is 5498657 - 5500609, so whenever we look up a shingle that the Bloom filter says may have occurred, we will read in the byte range 5498657 - 5500609 from {{{shingles.idx}}} and find the entry for the shingle.

===docindex===

This is a simple file with each line repesenting a document in the corpus. There are three tab-delimited fields:
	{{{file}}} - the fully-qualified location of the loaded file
	{{{title}}} - the title of the document
	{{{num_shingles}}} - the number of shingles generated from the document


==How Matches Work==
In order to minimize disk seeks, a Bloom filter (the Bloom::Faster Perl module) is used to check initially if a given shingle has been seen before. If the Bloom filter responds in the affirmative, the hash of the shingle is calculated, and the shingle hash index is consulted to find the byte range to read from the sorted shingle index ({{{shinges.idx}}}). That range is read into memory and searched for the relevant shingle. If it is not found, then the Bloom filter has given a false positive.


Bloom filters in general: http://en.wikipedia.org/wiki/Bloom_filter
Bloom::Faster perl module: http://search.cpan.org/~palvaro/Bloom-Faster-1.4/

 During the indexing, several files are created and stored in the {{{data_directory}}}. Documents in the {{{document_queue}}} are read into memory, shingled, and written out to {{{docindex}}} in the {{{data_directory}}}.
  * Shingles are written out to {{{shingles}}}, then sorted by hash value 

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages